generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
    relationMode      = "prisma"
}

model Account {
    id        String  @id @default(cuid())
    email     String  @unique
    password  String
    image_url String?

    planExpiresAt            DateTime?
    isRecurringPaymentActive Boolean   @default(false)

    name     String
    phone    String?
    birthday DateTime?
    gender   String?

    projects          Project[]
    selectedProjectId String?

    server_createdAt DateTime  @default(now())
    disabledAt       DateTime?

    @@map("accounts")
}

model CostumerAccount {
    id        String  @id @default(cuid())
    email     String  @unique
    password  String?
    image_url String?

    name     String
    phone    String?
    birthday DateTime?
    gender   String?

    Clients          Client[]
    server_createdAt DateTime @default(now())

    reportedProjects Project[] @relation("reportedProjects")

    @@map("costumer_accounts")
}

model Project {
    id               String   @id @default(cuid())
    server_createdAt DateTime @default(now())

    lastModifiedAt DateTime?
    isDeleted      Boolean   @default(false)

    // Security
    isVerified Boolean           @default(false)
    reports    CostumerAccount[] @relation("reportedProjects")

    // Basic Info
    name            String
    socialReason    String?
    juridicalPerson String?   @unique
    //segments        String? // ['food', 'health', 'education', 'beauty', 'construction', 'technology', 'entertainment', 'other']
    segments        Segment[]

    // Additional Info
    defaultAdditionalInfo  String?
    defaultWarrantyDetails String?

    defaultOrderString   OrderType   @default(order) // ['order', 'service']
    defaultProductString ProductType @default(product) // ['product', 'service']

    digitalSignature_url String?

    // Service
    businessModels            Json?   @default("[\"in_person\",\"online\",\"delivery\"]") // ['in_person', 'online', 'delivery']
    agenda                    Json    @default("[\"sunday\",\"monday\",\"tuesday\",\"wednesday\",\"thursday\",\"friday\",\"saturday\"]")
    autoHolidayUnavailability Boolean @default(false)
    busyAmount                Int     @default(1)
    unavailableAmount         Int     @default(3)
    serviceZoneCountries      Json?   @default("[]")
    serviceZoneStates         Json?   @default("[]")
    serviceZoneCities         Json?   @default("[]")

    // Contact
    email       String? @unique
    phone1      String?
    phone2      String?
    website     String?
    socialMedia Json?

    // Branding
    logo_url       String?
    banner_url     String?
    primaryColor   String?
    secondaryColor String?

    marketplaceData Json? // {slogan, at, about, description, keywords, tags, images, videos, links}

    // Address
    address Json?

    // Payments
    defaultPaymentMethods Json?    @default("[]") // ['Boleto', 'Dinheiro', 'Transferência Bancária', 'Cartão de Crédito', 'Cartão de Débito', 'Pix']
    currency              Currency @default(BRL)
    bankAccount           Json?
    pix                   Json?

    // Relations
    orders     Order[]
    categories Category[]

    // Catalog
    catalogedMaterials Material[]
    catalogedProducts  Product[]
    catalogedClients   Client[]   @relation("onCatalogProjects")

    account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
    accountId String

    @@index([accountId])
    @@map("projects")
}

model SegmentCategory {
    id               String   @id @unique @default(uuid())
    server_createdAt DateTime @default(now())

    name     String    @unique
    segments Segment[]

    @@map("segment_categories")
}

model Segment {
    id               String   @id @unique @default(uuid())
    server_createdAt DateTime @default(now())

    name     String    @unique
    projects Project[]

    category          SegmentCategory? @relation(fields: [segmentCategoryId], references: [id])
    segmentCategoryId String?

    @@index([segmentCategoryId])
    @@map("segments")
}

model Category {
    id               String   @id @default(uuid())
    server_createdAt DateTime @default(now())

    name  String
    icon  String
    color String

    projects Project[]

    @@map("categories")
}

enum ProductType {
    service
    product
}

enum OrderType {
    service
    order
}

enum Currency {
    BRL
    USD
    EUR
    JPY
    GBP
    AUD
    CAD
    CHF
    CNY
    SEK
    NZD
    MXN
    SGD
    HKD
    NOK
    KRW
    TRY
    RUB
    INR
}

model Order {
    id               String   @id @default(cuid())
    server_createdAt DateTime @default(now())

    lastModifiedAt DateTime?
    isDeleted      Boolean   @default(false)

    name   String
    date   DateTime?
    status OrderStatus @default(pending) // ['pending', 'archived', 'awaiting_payment', 'warranty', 'concluded', 'cancelled']

    additionalInfo String?

    // Payment
    paymentCondition PaymentCondition @default(full) // full, card, agreement
    paymentMethods   String? // ['Boleto', 'Dinheiro', 'Transferência Bancária', 'Cartão de Crédito', 'Cartão de Débito', 'Pix']

    // Split Values (for card and agreement payment)
    splitValue String?
    // pode ser:
    // 1. parcelas: do cartão quando NÃO há valor restante do acordo (splitRemaining)
    // 2. valor inicial do acordo em dinheiro: quando NÃO HÁ símbolos no valor (ex: número inteiro ['462'], '1/3' ou '1/2')
    // 3. valor inicial do acordo em porcentagem: quando há o símbolo de (%) no valor

    splitRemaining String? // pode ser 'parcelas' (ex: 2x, 3x) ou 'valor restante do acordo' ('remaining')

    // Warranty
    warrantyPeriod  Int     @default(90)
    warrantyDetails String?

    // Invoice
    invoiceValidity Int   @default(15)
    discount        Float @default(0)

    client   Client? @relation(fields: [clientId], references: [id])
    clientId String?

    project   Project @relation(fields: [projectId], references: [id])
    projectId String

    products  Product[]
    materials Material[]

    @@index([projectId])
    @@index([clientId])
    @@map("orders")
}

enum OrderStatus {
    pending
    archived
    awaiting_payment
    warranty
    concluded
    cancelled
}

enum PaymentCondition {
    full
    card
    agreement
}

model Client {
    id               String   @id @default(cuid())
    server_createdAt DateTime @default(now())

    lastModifiedAt DateTime?
    isDeleted      Boolean   @default(false)

    name      String?
    image_url String?
    phone     String?
    email     String?
    address   String?

    costumerAccount   CostumerAccount? @relation(fields: [costumerAccountId], references: [id])
    costumerAccountId String?

    project   Project @relation(fields: [projectId], references: [id], name: "onCatalogProjects")
    projectId String

    orders Order[]

    @@index([projectId])
    @@index([costumerAccountId])
    @@map("clients")
}

model Product {
    id               String   @id @default(cuid())
    server_createdAt DateTime @default(now())

    lastModifiedAt DateTime?
    isDeleted      Boolean   @default(false)

    name        String
    description String
    price       Float

    order   Order  @relation(fields: [orderId], references: [id])
    orderId String

    projectWithBookmark Project? @relation(fields: [projectId], references: [id])
    projectId           String?

    @@index([projectId])
    @@index([orderId])
    @@map("products")
}

model Material {
    id               String   @id @default(cuid())
    server_createdAt DateTime @default(now())

    lastModifiedAt DateTime?
    isDeleted      Boolean   @default(false)

    name         String
    description  String?
    image_url    String?
    price        Float   @default(0)
    amount       Int     @default(1)
    profitMargin Float   @default(0)
    availability Boolean @default(true)
    bookmarked   Boolean @default(false)

    order   Order  @relation(fields: [orderId], references: [id])
    orderId String

    projectWithBookmark Project? @relation(fields: [projectId], references: [id])
    projectId           String?

    @@index([projectId])
    @@index([orderId])
    @@map("materials")
}
