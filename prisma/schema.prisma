generator Client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
    relationMode      = "prisma"
}

model Account {
    id              String   @id @default(cuid())
    serverCreatedAt DateTime @default(now())
    lastModifiedAt  DateTime @default(now()) @updatedAt
    isDeleted       Boolean  @default(false)

    email    String  @unique
    password String
    imageUrl String?

    name     String
    phone    String?
    birthday DateTime?
    gender   Gender?

    project Project?

    // Subscription
    subscriptionId           String?
    subscriptionExpiresAt    DateTime?
    isRecurringPaymentActive Boolean   @default(false)

    @@map("accounts")
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

model Project {
    id              String   @id @default(cuid())
    serverCreatedAt DateTime @default(now())
    lastModifiedAt  DateTime @default(now()) @updatedAt
    isDeleted       Boolean  @default(false)

    // Basic Info
    name            String?
    socialReason    String?
    juridicalPerson String? @unique

    segments   Segment[]
    categories Category[]

    // Additional Info
    defaultAdditionalInfo  String?
    defaultWarrantyDetails String?

    defaultOrderString   OrderType   @default(ORDER) // ['order', 'service']
    defaultProductString ProductType @default(PRODUCT) // ['product', 'service']

    digitalSignature_url String?

    // Marketplace
    marketplace Marketplace?

    // Branding
    logo_url       String?
    banner_url     String?
    primaryColor   String?
    secondaryColor String?

    // Contact
    email       String?
    phone1      String?
    phone2      String?
    website     String?
    socialMedia Json?   @default("[]") // ['facebook', 'instagram', 'twitter', 'linkedin', 'youtube', 'tiktok', 'pinterest', 'whatsapp', 'telegram']

    // Address
    address Address?

    // Payments
    defaultPaymentMethods Json?        @default("[]")
    currency              Currency     @default(BRL)
    bankAccount           BankAccount?
    pix                   Pix?

    orders    Order[]
    costumers Costumer[]

    // Catalog
    products  Product[]
    materials Material[]

    account   Account @relation(fields: [accountId], references: [id])
    accountId String  @unique

    @@index([accountId])
    @@map("projects")
}

model Costumer {
    id              String   @id @default(cuid())
    serverCreatedAt DateTime @default(now())
    lastModifiedAt  DateTime @default(now()) @updatedAt
    isDeleted       Boolean  @default(false)

    name      String
    image_url String?
    phone     String?
    email     String?
    address   String?

    project   Project @relation(fields: [projectId], references: [id])
    projectId String

    orders Order[]

    @@index([projectId])
    @@index([id])
    @@map("Costumers")
}

model Pix {
    id              String   @id @default(cuid())
    serverCreatedAt DateTime @default(now())
    lastModifiedAt  DateTime @default(now()) @updatedAt
    isDeleted       Boolean  @default(false)

    key_type PixKeyType
    key      String     @unique

    project   Project @relation(fields: [projectId], references: [id])
    projectId String  @unique

    @@index([projectId])
    @@map("pix")
}

enum PixKeyType {
    CPF
    CNPJ
    EMAIL
    PHONE
    RANDOM
}

model BankAccount {
    id              String   @id @default(cuid())
    serverCreatedAt DateTime @default(now())
    lastModifiedAt  DateTime @default(now()) @updatedAt
    isDeleted       Boolean  @default(false)

    bank        Bank
    agency      String
    agencyDigit String
    account     String
    accountType String

    titularPin String

    project   Project @relation(fields: [projectId], references: [id])
    projectId String  @unique

    @@index([projectId])
    @@map("bank_accounts")
}

enum Bank {
    BANCO_DO_BRASIL
    BRADESCO
    CAIXA
    ITAU
    NUBANK
    SANTANDER
    SICOOB
    SICREDI
    ORIGINAL
    INTER
    C6
    BS2
    NEON
    PAGBANK
    BRB
    BANRISUL
    STONE
    VIA_CREDI
    OTHER
}

model Address {
    id              String   @id @default(cuid())
    serverCreatedAt DateTime @default(now())
    lastModifiedAt  DateTime @default(now()) @updatedAt
    isDeleted       Boolean  @default(false)

    country  String
    state    String
    city     String
    district String
    street   String
    number   String
    zipCode  String

    project   Project @relation(fields: [projectId], references: [id])
    projectId String  @unique

    @@index([projectId])
    @@map("addresses")
}

model Marketplace {
    id              String   @unique @default(uuid())
    serverCreatedAt DateTime @default(now())
    lastModifiedAt  DateTime @default(now()) @updatedAt

    at          String  @unique
    slogan      String?
    description String?
    isEnabled   Boolean @default(false)

    // Security
    isVerified Boolean @default(false)

    businessModels Json? @default("[\"in_person\",\"online\",\"delivery\"]") // ['in_person', 'online', 'delivery']
    agenda         Json? @default("[\"sunday\",\"monday\",\"tuesday\",\"wednesday\",\"thursday\",\"friday\",\"saturday\"]")

    autoHolidayUnavailability Boolean @default(false)
    busyAmount                Int     @default(1)
    unavailableAmount         Int     @default(3)

    serviceZoneCountries Json? @default("[]")
    serviceZoneStates    Json? @default("[]")
    serviceZoneCities    Json? @default("[]")

    project   Project @relation(fields: [projectId], references: [id])
    projectId String  @unique

    @@index([projectId])
}

model SegmentCategory {
    id        String   @id @unique @default(uuid())
    createdAt DateTime @default(now())

    name     String    @unique
    segments Segment[]

    @@map("segment_categories")
}

model Segment {
    id        String   @id @unique @default(uuid())
    createdAt DateTime @default(now())

    name     String    @unique
    projects Project[]

    category          SegmentCategory? @relation(fields: [segmentCategoryId], references: [id])
    segmentCategoryId String?

    @@index([segmentCategoryId])
    @@map("segments")
}

model Category {
    id              String   @id @default(uuid())
    serverCreatedAt DateTime @default(now())
    lastModifiedAt  DateTime @default(now()) @updatedAt
    isDeleted       Boolean  @default(false)

    name  String
    icon  String
    color String

    project   Project @relation(fields: [projectId], references: [id])
    projectId String

    products Product[]

    @@index([projectId])
    @@map("categories")
}

enum ProductType {
    SERVICE
    PART
    PRODUCT
}

enum OrderType {
    SERVICE
    ORDER
}

enum Currency {
    BRL
    USD
    EUR
    JPY
    GBP
    AUD
    CAD
    CHF
    CNY
    SEK
    NZD
    MXN
    SGD
    HKD
    NOK
    KRW
    TRY
    RUB
    INR
}

model Order {
    id              String   @id @default(cuid())
    serverCreatedAt DateTime @default(now())
    lastModifiedAt  DateTime @default(now()) @updatedAt
    isDeleted       Boolean  @default(false)

    name           String
    date           DateTime?
    status         OrderStatus @default(PENDING) // ['pending', 'archived', 'awaiting_payment', 'warranty', 'concluded', 'cancelled']
    additionalInfo String?
    notes          String?

    // Payment
    paymentConditions   PaymentConditions? @relation(onDelete: Cascade, onUpdate: Cascade, fields: [paymentConditionsId], references: [id]) // FULL, INSTALLMENTS, AGREEMENT
    paymentConditionsId String?            @unique

    paymentMethods Json? @default("[]") // ['cash', 'credit_card', 'debit_card', 'pix', 'transfer', 'deposit', 'check', 'billet', 'agreement']

    // Warranty
    warrantyPeriod  Int?    @default(90)
    warrantyDetails String?

    costumer   Costumer? @relation(fields: [costumerId], references: [id])
    costumerId String?

    project   Project @relation(fields: [projectId], references: [id])
    projectId String

    products  Product[]
    materials Material[]

    discounts Discount[]
    fees      Fee[]

    @@index([costumerId])
    @@index([projectId])
    @@map("orders")
}

enum OrderStatus {
    ARCHIVED
    PENDING
    WARRANTY
    CONCLUDED
    CANCELLED
}

model PaymentConditions {
    id              String   @id @default(uuid())
    serverCreatedAt DateTime @default(now())
    lastModifiedAt  DateTime @default(now()) @updatedAt
    isDeleted       Boolean  @default(false)

    type PaymentType @default(FULL) // ['full', 'installments', 'agreement']

    // Installments
    installmentsAmount Int? @default(2)

    // Agreement
    agreementValue     Float?
    agreementValueType ValueType @default(CURRENCY) // ['percentage', 'currency']

    // Other
    details String?

    order Order?

    @@map("payment_conditions")
}

enum PaymentType {
    FULL
    INSTALLMENTS
    AGREEMENT
}

enum ValueType {
    PERCENTAGE
    CURRENCY
}

model Fee {
    id              String   @id @default(uuid())
    serverCreatedAt DateTime @default(now())
    lastModifiedAt  DateTime @default(now()) @updatedAt

    name        String?
    description String?
    value       Float
    valueType   ValueType @default(CURRENCY) // ['percentage', 'currency']
    type        FeeType   @default(OTHER) // ['delivery', 'service ,'other']

    order   Order  @relation(fields: [orderId], references: [id])
    orderId String

    @@index([orderId])
    @@map("fees")
}

enum FeeType {
    TRANSPORT
    SERVICE
    OTHER
}

model Discount {
    id              String   @id @default(uuid())
    serverCreatedAt DateTime @default(now())
    lastModifiedAt  DateTime @default(now()) @updatedAt

    name        String
    description String?
    value       Float
    valueType   ValueType    @default(CURRENCY) // ['percentage', 'currency']
    type        DiscountType

    order   Order  @relation(fields: [orderId], references: [id])
    orderId String

    @@index([orderId])
    @@map("discounts")
}

enum DiscountType {
    PRODUCTS
    MATERIALS
}

model Product {
    id              String   @id @default(cuid())
    serverCreatedAt DateTime @default(now())
    lastModifiedAt  DateTime @default(now()) @updatedAt
    isDeleted       Boolean  @default(false)

    name        String
    description String?
    price       Float?     @default(0)
    unit        Unit       @default(UNIT)
    amount      Int        @default(1)
    categories  Category[]

    order   Order  @relation(fields: [orderId], references: [id])
    orderId String

    project   Project? @relation(fields: [projectId], references: [id])
    projectId String?

    @@index([projectId])
    @@index([orderId])
    @@map("products")
}

enum Unit {
    UNIT
    M2
    KM2
    HA
    MM
    CM
    M
    KM
    ML
    L
    M3
    MIN
    H
    DAYS
    WEEKS
    MONTHS
    G
    KG
}

model Material {
    id              String   @id @default(cuid())
    serverCreatedAt DateTime @default(now())
    lastModifiedAt  DateTime @default(now()) @updatedAt
    isDeleted       Boolean  @default(false)

    name        String
    description String?
    image_url   String?

    price          Float?         @default(0)
    cost           Float          @default(0)
    profitMargin   Float          @default(0)
    amount         Int            @default(1)
    unit           Unit           @default(UNIT)
    responsibility Responsability @default(PROJECT) // ['project', 'costumer', 'other']

    order   Order  @relation(fields: [orderId], references: [id])
    orderId String

    project   Project? @relation(fields: [projectId], references: [id])
    projectId String?

    @@index([projectId])
    @@index([orderId])
    @@map("materials")
}

enum Responsability {
    PROJECT
    COSTUMER
    OTHER
}
