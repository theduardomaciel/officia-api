generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
    relationMode      = "prisma"
}

model Account {
    id        String  @id @default(cuid())
    email     String  @unique
    password  String
    image_url String?

    name     String
    phone    String?
    birthday DateTime?
    gender   String?
    pin      String    @unique

    projects  Project[]
    createdAt DateTime  @default(now())

    @@map("accounts")
}

model Project {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    name            String
    socialReason    String
    juridicalPerson String @unique
    email           String

    logo_url             String?
    digitalSignature_url String?

    address   String
    phone1    String
    phone2    String?
    website   String?
    instagram String?
    facebook  String?
    twitter   String?
    tiktok    String?

    bankAccount String?
    pixKey      String?

    defaultAdditionalInfo  String?
    defaultWarrantyDetails String?

    clients   Client[]
    services  Service[]
    materials Material[]

    account   Account @relation(fields: [accountId], references: [id])
    accountId String

    @@index([accountId])
    @@map("projects")
}

model Service {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    name   String
    date   DateTime?
    status ServiceStatus @default(pending) // ['pending', 'archived', 'awaiting_payment', 'warranty', 'concluded', 'cancelled']

    additionalInfo String?

    // Payment
    paymentCondition PaymentCondition @default(full) // full, card, agreement
    paymentMethods   String? // ['Boleto', 'Dinheiro', 'Transferência Bancária', 'Cartão de Crédito', 'Cartão de Débito', 'Pix']

    // Split Values (for card and agreement payment)
    splitInitialValue String? // ex: 50% (para valores com porcentagem) e 50 (para valores cheios)
    splitValue        String?

    // Warranty
    warrantyPeriod  Int     @default(90)
    warrantyDetails String?

    // Invoice
    invoiceValidity Int   @default(15)
    discount        Float @default(0)

    client   Client? @relation(fields: [clientId], references: [id])
    clientId String?

    project   Project @relation(fields: [projectId], references: [id])
    projectId String

    subServices SubService[]

    @@index([projectId])
    @@index([clientId])
    @@map("services")
}

enum ServiceStatus {
    pending
    archived
    awaiting_payment
    warranty
    concluded
    cancelled
}

enum PaymentCondition {
    full
    card
    agreement
}

model Client {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    name      String
    image_url String?
    phone     String?
    email     String?
    address   String?

    project   Project @relation(fields: [projectId], references: [id])
    projectId String

    services Service[]

    @@index([projectId])
    @@map("clients")
}

model SubService {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    name        String
    description String
    price       Float

    service   Service @relation(fields: [serviceId], references: [id])
    serviceId String

    @@index([serviceId])
    @@map("sub_services")
}

model Material {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    name         String
    description  String?
    image_url    String?
    price        Float   @default(0)
    amount       Int     @default(1)
    profitMargin Float   @default(0)
    availability Boolean @default(true)
    bookmarked   Boolean @default(false)

    project   Project @relation(fields: [projectId], references: [id])
    projectId String

    @@index([projectId])
    @@map("materials")
}
